<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
    
    <h1>Restful SPA</h1>

    <div>
        <form id="idolForm">
            아이디 <input type="text" name="sid" value=""><br>
            이름   <input type="text" name="sname" value="" required><br>
            나이   <input type="text" name="age" value="" required><br>
            <button type="submit" style="background-color: steelblue;">등록버튼</button><br>
            <button type="button" onclick="modify(this)" style="background-color: yellowgreen;">수정버튼</button><br>
            <button type="button" onclick="del(this)" style="background-color:crimson;">삭제버튼</button><br>
            <button type="button" onclick="sch(this)" style="background-color:aquamarine;">검색버튼</button><br>
        </form>
    </div>

    <div id="list"></div>

<script>
    
    // 검색버튼 이벤트
    function sch(pBtn) {
        let pForm = pBtn.closest("form"); // closest은 정말 많이 사용됨
        let sidVal = pForm.sid.value;
                
        fetch(`/api/idols/\${sidVal}`).then(resp => {
            resp.json().then(idol => {
                if(idol) {
                    pForm.sname.value = idol.name;
                    pForm.age.value = idol.age;
                } 
            ).catch
        });
    }
    
    // 삭제버튼 이벤트
    function del(pBtn) {
        let pForm = pBtn.closest("form"); // closest은 정말 많이 사용됨
        let sidVal = pForm.sid.value;
                
        fetch(`/api/idols/\${sidVal}`, {
            method : "delete",
        }).then(resp => {
            resp.text().then(result => {
                // 성공하면 리스트 다시 뿌리기
                getList();
            });
        });
    }
    
    
    // 수정버튼 이벤트
    function modify(pBtn) {
        let pForm = pBtn.closest("form"); // closest은 정말 많이 사용됨
        const modIdol = {   // VO랑 같은 모양으로 만들어라
            sid : pForm.sid.value,
            name : pForm.sname.value,   
            age : pForm.age.value,
        };

        fetch("/api/idols", {
            method : "put",
            headers : {"Content-Type" : "application/json"},
            body : JSON.stringify(modIdol)
        }).then(resp => {
            resp.json().then(idol => {
                // 성공하면 리스트 다시 뿌리기
                getList();
            });
        });
    }
    

    // 오늘 fetch 사용법 확실히 머리에 새길 것!
    const idolForm = document.querySelector("#idolForm");
    idolForm.onsubmit = function() {
        event.preventDefault(); 
        const newIdol = {   // VO랑 같은 모양으로 만들어라
            sid : idolForm.sid.value,
            name : idolForm.sname.value,
            age : idolForm.age.value,
        }

        fetch("/api/idols", {
            method : "POST",
            headers : {"Content-Type" : "application/json"},
            body : JSON.stringify(newIdol)  // sirialize : JSON 형식을 문자열로 변환
        }).then(resp => {
            resp.json().then(idol => {
                console.log("결과체킁", idol);
                getList();
            });
        });
    }

    const list = document.querySelector("#list");

    function getList() {
        // 먼저 리스트 가져오기 get
        // 지금 상황은 same-origin (Not CrossOrigin)이라 제약사항 없음
        // fetch는 아무것도 안쓰면 get방식, promise를 리턴(=then사용가능)한다.
        fetch("/api/idols").then(resp => {
            resp.json().then(idolList => {
                console.log("결과체킁", idolList);
                let tblStr = "<table border=1 width=400>";
                    tblStr += "<tr><th>ID</th><th>이름</th><th>나이</th></tr>";
                for(let i=0; i<idolList.length; i++) {
                    let idol = idolList[i];
                    tblStr +=`
                            <tr>
                                <td>\${idol.sid}</td>
                                <td>\${idol.name}</td>
                                <td>\${idol.age}</td>
                            </tr>
                            `;
                }
                tblStr += "</table>";
                list.innerHTML = tblStr;
            });
        });
    }

    // 처음에 한 번은 직접 호출을 해줘야함
    getList();

</script>
</body>
</html>